name: Build / Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      # Initial setup
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - run: mkdir logs

      # Install dependencies
      - run: npm ci

      # Linting
      - run: npm run check-style
      - run: npm run lint

      # Create certs
      - run: sudo chown -R runner:docker certs
      - run: npm run certs

      # Run unit tests
      - run: npm run test

      # Setup dependencies
      - name: Build the stack
        run: |
          cat <<EOT >> config/local.js
          module.exports = {
            minio: {
              accessKey: 'minioadmin',
              secretKey: 'minioadmin',
            },

            smtp: {
              auth: {
                user: 'mailuser',
                pass: 'mailpass',
              },
              tls: {
                rejectUnauthorized: false,
              },
            },

            logging: {
              file: {
                path: '/home/runner/work/Bailo/Bailo/logs/out.log',
              },
            },
          }
          EOT

          docker-compose up --force-recreate --build -d

      # wait for app to start
      - run: |
          chmod +x ./server/scripts/waitForIt.sh
          ./server/scripts/waitForIt.sh localhost:8080 -t 10

      # Run integration tests
      - run: HEADLESS=true npm run integration

      - name: Dump docker-compose logs
        if: always()
        run: docker-compose logs > logs/stack.log

      - name: Docker Compose Logs
        if: always()
        run: cat logs/stack.log

      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: logs
          path: logs
